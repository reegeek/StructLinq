<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
    };
#>

// Generated code

using System;
using System.Runtime.CompilerServices;
 

// ReSharper disable once CheckNamespace
namespace StructLinq
{
<# foreach(var t in types) {  #>
    
    public static partial class StructEnumerable
    {
            private struct Sum<#= t.Name #>Visitor : IVisitor<<#= t.Name #>>
        {
            public <#= t.Name #> sum;
            public Sum<#= t.Name #>Visitor(<#= t.Name #> sum)
            {
                this.sum = sum;
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Visit(<#= t.Name #> input)
            {
                sum += input;
                return true;
            }
        }

            private struct SumFunc<#= t.Name #>Visitor<T> : IVisitor<T>
        {
            public <#= t.Name #> sum;
            private readonly Func<T, <#= t.Name #>> func;
            public SumFunc<#= t.Name #>Visitor(<#= t.Name #> sum, Func<T, <#= t.Name #>> func)
            {
                this.sum = sum;
                this.func = func;
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Visit(T input)
            {
                sum += func(input);
                return true;
            }
        }

        private struct SumIFunction<#= t.Name #>Visitor<T, TFunc> : IVisitor<T>
            where TFunc : IFunction<T, <#= t.Name #>>
        {
            public <#= t.Name #> sum;
            private readonly TFunc func;
            public SumIFunction<#= t.Name #>Visitor(<#= t.Name #> sum, TFunc func)
            {
                this.sum = sum;
                this.func = func;
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Visit(T input)
            {
                sum += func.Eval(input);
                return true;
            }
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<TEnumerable, TEnumerator>(this StructEnumerable<<#= t.Name #>, TEnumerable, TEnumerator> enumerable)
            where TEnumerable : struct,IStructEnumerable<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
        {
            var sumVisitor = new Sum<#= t.Name #>Visitor(0);
            enumerable.enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum;      
        }


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static <#= t.Name #> Sum<TEnumerable, TEnumerator>(this StructEnumerable<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, Func<TEnumerable, IStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
            where TEnumerable : struct, IStructEnumerable<<#= t.Name #>, TEnumerator>
        {
            var sumVisitor = new Sum<#= t.Name #>Visitor(0);
            enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<T, TEnumerable,TEnumerator>(this StructEnumerable<T, TEnumerable, TEnumerator> enumerable, Func<T, <#= t.Name #>> func)
            where TEnumerable : struct, IStructEnumerable<T, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<T>
        {
            var sumVisitor = new SumFunc<#= t.Name #>Visitor<T>(0, func);
            enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum;        
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static <#= t.Name #> Sum<T,TEnumerable,TEnumerator>(this StructEnumerable<T, TEnumerable, TEnumerator> enumerable, 
        Func<T, <#= t.Name #>> func, 
        Func<TEnumerable, IStructEnumerable<T, TEnumerator>> _)
            where TEnumerable : struct, IStructEnumerable<T, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<T>
        {
            var sumVisitor = new SumFunc<#= t.Name #>Visitor<T>(0, func);
            enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum; 
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<T, TEnumerable, TEnumerator>(this StructEnumerable<T, TEnumerable, TEnumerator> enumerable, 
        IFunction<T,<#= t.Name #>> func)
            where TEnumerable : struct, IStructEnumerable<T, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<T>
        {
            var sumVisitor = new SumIFunction<#= t.Name #>Visitor<T, IFunction<T,<#= t.Name #>>>(0, func);
            enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum; 
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static <#= t.Name #> Sum<T,TEnumerable,TEnumerator, TFunc>(this StructEnumerable<T, TEnumerable, TEnumerator> enumerable,
            ref TFunc func, 
            Func<TEnumerable, IStructEnumerable<T, TEnumerator>> _,
            Func<TFunc, IFunction<T,<#= t.Name #>>> __)
            where TEnumerable : struct, IStructEnumerable<T, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<T>
            where TFunc : IFunction<T,<#= t.Name #>>
        {
            var sumVisitor = new SumIFunction<#= t.Name #>Visitor<T, TFunc>(0, func);
            enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum;         
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<T,TEnumerable,TEnumerator, TFunc>(this StructEnumerable<T, TEnumerable, TEnumerator> enumerable,
            ref TFunc func,
            Func<TFunc, IFunction<T,<#= t.Name #>>> __)
            where TEnumerable : struct, IStructEnumerable<T, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<T>
            where TFunc : IFunction<T,<#= t.Name #>>
        {
            var sumVisitor = new SumIFunction<#= t.Name #>Visitor<T, TFunc>(0, func);
            enumerable.Visit(ref sumVisitor);
            return sumVisitor.sum;         
        }
    }

    public static partial class StructCollection
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static <#= t.Name #> Sum<#= t.Name #><TEnumerator>(ref TEnumerator enumerator)
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            <#= t.Name #> result = 0;
            var count = enumerator.Count;
            for (int i = 0; i < count; i++)
            {
                result += enumerator.Get(i);
            }
            enumerator.Dispose();
            return result;
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static <#= t.Name #> Sum<#= t.Name #><T,TEnumerator, TFunc>(ref TEnumerator enumerator, ref TFunc func)
            where TEnumerator : struct, ICollectionEnumerator<T>
            where TFunc : IFunction<T,<#= t.Name #>>
        {
            <#= t.Name #> result = 0;
            var count = enumerator.Count;
            for (int i = 0; i < count; i++)
            {
                result += func.Eval(enumerator.Get(i));
            }
            enumerator.Dispose();
            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static <#= t.Name #> Sum<#= t.Name #><T,TEnumerator>(ref TEnumerator enumerator, Func<T, <#= t.Name #>> func)
            where TEnumerator : struct, ICollectionEnumerator<T>
        {
            <#= t.Name #> result = 0;
            var count = enumerator.Count;
            for (int i = 0; i < count; i++)
            {
                result += func(enumerator.Get(i));
            }
            enumerator.Dispose();
            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<TEnumerable, TEnumerator>(this StructCollection<<#= t.Name #>, TEnumerable, TEnumerator> enumerable)
            where TEnumerable : struct, IStructCollection<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #>(ref enumerator);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static <#= t.Name #> Sum<TEnumerable, TEnumerator>(this StructCollection<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, Func<TEnumerable, IStructCollection<<#= t.Name #>, TEnumerator>> _)
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
            where TEnumerable : struct, IStructCollection<<#= t.Name #>, TEnumerator>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #>(ref enumerator);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<T, TEnumerable, TEnumerator>(this StructCollection<T, TEnumerable, TEnumerator> enumerable, Func<T, <#= t.Name #>> func)
            where TEnumerable : struct, IStructCollection<T, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<T>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #>(ref enumerator, func);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static <#= t.Name #> Sum<T,TEnumerable,TEnumerator>(this StructCollection<T, TEnumerable, TEnumerator> enumerable, 
        Func<T, <#= t.Name #>> func, 
        Func<TEnumerable, IStructCollection<T, TEnumerator>> _)
            where TEnumerable : struct, IStructCollection<T, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<T>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #>(ref enumerator, func);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<T,TEnumerable, TEnumerator>(this StructCollection<T, TEnumerable, TEnumerator> enumerable, 
        IFunction<T,<#= t.Name #>> func)
            where TEnumerable : struct, IStructCollection<T, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<T>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #><T,TEnumerator, IFunction<T,<#= t.Name #>>>(ref enumerator, ref func);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static <#= t.Name #> Sum<T,TEnumerable,TEnumerator, TFunc>(this StructCollection<T, TEnumerable, TEnumerator> enumerable,
            ref TFunc func, 
            Func<TEnumerable, IStructCollection<T, TEnumerator>> _,
            Func<TFunc, IFunction<T,<#= t.Name #>>> __)
            where TEnumerable : struct, IStructCollection<T, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<T>
            where TFunc : IFunction<T,<#= t.Name #>>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #><T,TEnumerator, TFunc>(ref enumerator,ref func);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Sum<T,TEnumerable,TEnumerator, TFunc>(this StructCollection<T, TEnumerable, TEnumerator> enumerable,
            ref TFunc func, 
            Func<TFunc, IFunction<T,<#= t.Name #>>> __)
            where TEnumerable : struct, IStructCollection<T, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<T>
            where TFunc : IFunction<T,<#= t.Name #>>
        {
            var enumerator = enumerable.enumerable.GetEnumerator();
            return Sum<#= t.Name #><T,TEnumerator, TFunc>(ref enumerator,ref func);
        }

    }

<# } #>
}