<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
        typeof(DateTime),
    };
#>

// Generated code

using System;
using System.Runtime.CompilerServices;


// ReSharper disable once CheckNamespace
namespace StructLinq
{
<# foreach(var t in types) {  #>
    public static partial class StructEnumerable
    {
        private struct Min<#= t.Name #>Visitor : IVisitor<<#= t.Name #>>
        {
            public bool HasMin;
            public <#= t.Name #> Min;
            public Min<#= t.Name #>Visitor(bool hasMin, <#= t.Name #> min)
            {
                HasMin = hasMin;
                Min = min;
            }
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool Visit(<#= t.Name #> input)
            {
                if (!HasMin)
                {
                    Min = input;
                    HasMin = true;
                    return true;
                }
                if (Min > input)
                    Min = input;
                return true;
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Min<TEnumerator>(this IStructEnumerable<<#= t.Name #>, TEnumerator> enumerable)
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
        {
            var minVisitor = new Min<#= t.Name #>Visitor(false, default);
            enumerable.Visit(ref minVisitor);
            if (!minVisitor.HasMin)
                throw new ArgumentOutOfRangeException("No elements");
            return minVisitor.Min;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= t.Name #> Min<TEnumerable,TEnumerator>(this TEnumerable enumerable, Func<TEnumerable,IStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerable : struct, IStructEnumerable<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
        {
            var minVisitor = new Min<#= t.Name #>Visitor(false, default);
            enumerable.Visit(ref minVisitor);
            if (!minVisitor.HasMin)
                throw new ArgumentOutOfRangeException("No elements");
            return minVisitor.Min;
        }

    }


<# } #>
}
