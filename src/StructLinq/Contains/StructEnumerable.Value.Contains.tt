<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var types = new[]
    {
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(byte), 
        typeof(sbyte),
        typeof(DateTime),
    };
#>

using System;
using System.Runtime.CompilerServices;
using StructLinq.Contains;


// ReSharper disable once CheckNamespace
namespace StructLinq
{
    public static partial class StructEnumerable
    {
        <# foreach(var t in types) {  #>
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static bool Contains<TEnumerable, TEnumerator>(this StructEnumerable<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x,
            Func<TEnumerable, IStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerable : struct, IStructEnumerable<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
        {
            var comparer = new DefaultStructEqualityComparer();
            var visitor = new ContainsVisitor<<#= t.Name #>, DefaultStructEqualityComparer>(comparer, x);
            return enumerable.Visit(ref visitor) == VisitStatus.VisitorFinished;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Contains<TEnumerable, TEnumerator>(
            this StructEnumerable<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x)
            where TEnumerable : struct, IStructEnumerable<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, IStructEnumerator<<#= t.Name #>>
        {
            var comparer = new DefaultStructEqualityComparer();
            var visitor = new ContainsVisitor<<#= t.Name #>, DefaultStructEqualityComparer>(comparer, x);
            return enumerable.Visit(ref visitor) == VisitStatus.VisitorFinished;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static bool Contains<TEnumerable, TEnumerator>(this StructCollection<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x,
            Func<TEnumerable, IStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerable : struct, IStructCollection<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            var comparer = new DefaultStructEqualityComparer();
            var visitor = new ContainsVisitor<<#= t.Name #>, DefaultStructEqualityComparer>(comparer, x);
            return enumerable.Visit(ref visitor) == VisitStatus.VisitorFinished;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Contains<TEnumerable, TEnumerator>(
            this StructCollection<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x)
            where TEnumerable : struct, IStructCollection<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, ICollectionEnumerator<<#= t.Name #>>
        {
            var comparer = new DefaultStructEqualityComparer();
            var visitor = new ContainsVisitor<<#= t.Name #>, DefaultStructEqualityComparer>(comparer, x);
            return enumerable.Visit(ref visitor) == VisitStatus.VisitorFinished;
        }


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static bool Contains<TEnumerable, TEnumerator>(this RefStructEnumerable<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x,
            Func<TEnumerable, IRefStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerator : struct, IRefStructEnumerator<<#= t.Name #>>
            where TEnumerable : struct, IRefStructEnumerable<<#= t.Name #>, TEnumerator>
        {
            var comparer = new DefaultStructInEqualityComparer();
            return enumerable.Contains(x, comparer);
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Contains<TEnumerable, TEnumerator>(
            this RefStructEnumerable<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x)
            where TEnumerable : struct, IRefStructEnumerable<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, IRefStructEnumerator<<#= t.Name #>>
        {
            var comparer = new DefaultStructInEqualityComparer();
            return enumerable.Contains(x, comparer);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [Obsolete("Remove last argument")]
        public static bool Contains<TEnumerable, TEnumerator>(this RefStructCollection<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x,
            Func<TEnumerable, IRefStructEnumerable<<#= t.Name #>, TEnumerator>> _)
            where TEnumerator : struct, IRefCollectionEnumerator<<#= t.Name #>>
            where TEnumerable : struct, IRefStructCollection<<#= t.Name #>, TEnumerator>
        {
            var comparer = new DefaultStructInEqualityComparer();
            return enumerable.Contains(x, comparer);
        }
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool Contains<TEnumerable, TEnumerator>(
            this RefStructCollection<<#= t.Name #>, TEnumerable, TEnumerator> enumerable, <#= t.Name #> x)
            where TEnumerable : struct, IRefStructCollection<<#= t.Name #>, TEnumerator>
            where TEnumerator : struct, IRefCollectionEnumerator<<#= t.Name #>>
        {
            var comparer = new DefaultStructInEqualityComparer();
            return enumerable.Contains(x, comparer);
        }

    <# } #>

    }
}
